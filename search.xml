<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>GC知识</title>
      <link href="posts/114e.html"/>
      <url>posts/114e.html</url>
      
        <content type="html"><![CDATA[<h1 id="首先明确什么是垃圾"><a href="#首先明确什么是垃圾" class="headerlink" title="首先明确什么是垃圾"></a>首先明确什么是垃圾</h1><p>没有任何一个引用指向的对象或者没有任何指向的相互循环引用的多个对象</p><h1 id="怎么寻找垃圾"><a href="#怎么寻找垃圾" class="headerlink" title="怎么寻找垃圾"></a>怎么寻找垃圾</h1><p>Java用的是<strong>根可达算法</strong></p><p>所谓根就是线程的栈变量、静态变量、常量池、JNI指针</p><p>如果一个对象没有被他们任何一个用到，就无法到达</p><h1 id="什么时候GC"><a href="#什么时候GC" class="headerlink" title="什么时候GC"></a>什么时候GC</h1><p>1.程序调用System.gc时进行GC</p><p>2.操作系统会在内存不足时进行GC</p><h1 id="圾回收算法："><a href="#圾回收算法：" class="headerlink" title="圾回收算法："></a>圾回收算法：</h1><h2 id="标记清除"><a href="#标记清除" class="headerlink" title="标记清除"></a>标记清除</h2><p><img src="/posts/114e.htm/1605776884509.png" alt="1605776884509"></p><p>分为两个阶段，标记阶段，标记每个对象是活着还是死亡，第二个阶段为清除阶段，直接清除掉死亡对象</p><p><strong>弊端</strong>：GC后产生位置不连续的内存碎片</p><h2 id="拷贝算法"><a href="#拷贝算法" class="headerlink" title="拷贝算法"></a>拷贝算法</h2><p>把内存分为平均两个部分，每次只用其中一个，而当其中一个内存满了之后，将内存中所有存活的对象复制到另一半中，就这样循环下去</p><p>没有内存碎片，内存连续，<strong>浪费内存</strong></p><p><img src="/posts/114e.htm/1605799583803.png" alt="1605799583803"></p><h2 id="标记压缩"><a href="#标记压缩" class="headerlink" title="标记压缩"></a>标记压缩</h2><p><img src="/posts/114e.htm/1605799754589.png" alt="1605799754589"></p><p>第一阶段标记存活状态，第二阶段把所有存活对象整理到一块连续的内存上，然后在把非存活的对象清理掉，<strong>但需要单开线程，效率低，但是没有内存碎片产生</strong></p><h2 id="分代收集算法（jdk1-8版本）"><a href="#分代收集算法（jdk1-8版本）" class="headerlink" title="分代收集算法（jdk1.8版本）"></a>分代收集算法（jdk1.8版本）</h2><p>现在Java用的是这种回收算法</p><h3 id="Java中的分代模型"><a href="#Java中的分代模型" class="headerlink" title="Java中的分代模型"></a>Java中的分代模型</h3><p>新生代+老年代+元数据区（jdk1.8）  jdk1.7为永久代</p><p>​    永久代和元数据区的区别</p><p>​    永久代初始化必须设置内存大小，<strong>会出现OOM（内存溢出现象）</strong></p><p>​    元数据区可以<strong>动态的调整大小</strong>，初始化时可以不指定大小</p><h3 id="堆内存逻辑分区"><a href="#堆内存逻辑分区" class="headerlink" title="堆内存逻辑分区"></a>堆内存逻辑分区</h3><p>新生代为eden+两个survivor，<strong>大小8:1:1</strong>，因为新生代垃圾回收（YGC=MinorGC）会回收掉大部分类，</p><p>回收过程：</p><p>1.先把eden区的死亡类回收，然后把存活的放到s0中；</p><p>2.然后再次回收时回收eden和s0中的类，把活的类复制到s1中，以此往复</p><p>经过多次回收，新生代不再年轻会进入到老年代</p><p>3.类创建过程太大，直接进入到老年代</p><p>老年代垃圾回收（FGC=MajorGC），要避免<strong>频繁的老年代垃圾回收</strong>。因为回收过程会停止服务</p><p>FGC为老年代和新生代一起垃圾回收</p><p><img src="/posts/114e.htm/1605778541573.png" alt="1605778541573"></p><h3 id="垃圾回收器"><a href="#垃圾回收器" class="headerlink" title="垃圾回收器"></a>垃圾回收器</h3><p><img src="/posts/114e.htm/1605790595902.png" alt="1605790595902"></p><p>上边的为新生代回收器，下边的为老年代回收器，Serial为串行回收，Parallel为并行回收，jdk1.8默认为串行的新生代和老年代回收器</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>垃圾回收的是没有任何引用的对象，可能是一个可能是一堆对象，然后通过根可达算法去寻找新生代和老年代中的死对象，在通过分代收集算法，去进行垃圾回收。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java、GC垃圾回收，jdk1.8 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="posts/3eeb.html"/>
      <url>posts/3eeb.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
